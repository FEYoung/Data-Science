my_data<-data.frame(patirnts, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
clas(my_data)
class(my_data)
cnames<-C("patient", "age", "weight", "bp", "rating", "test")
cnames<-C("patient","age","weight","bp","rating","test")
cnames<-c("patient","age","weight","bp","rating","test")
?colnames
colnames(my_data)<-cnames
my _data
my_data
TRUE==TRUE
(FALSE==TRUE)++TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!5==7
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 &&
| 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE)6>4)
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,clas)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flags)
head(flags_colors)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[ ,19:23]
lappy(flag_shapes,range)
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,lenght)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
quit()
(70/95)/(15/95)
(70/95)/(15/95)->x
pnorm(x)
pnorm(-x)
x<-45/66
y<-15/66
rr<-x/y
se<-Sqrt(((1-x)/(x*66))+(1-y)/(y*66)))
se<-Sqrt(((1-x)/(x*66))+(1-y)/(y*66))
se<-sqrt(((1-x)/(x*66))+(1-y)/(y*66))
log(rr)+se
log(rr)-se
se
pbinom(3, 4, .5, lower.tail = FALSE)
pbinom(3, 4, .5)
pbinom(3, 4, .5, lower.tail = FALSE)*2
pbinom(1, 4, .5, lower.tail = FALSE)
x<-matrix(c(4,1,2,6), nrow=2, ncol=2)
x
fisher.test(dat, alternative = "greater")
fisher.test(x, alternative = "greater")
y<-matrix(c(3,2,1,4),nrow=2,ncol=2)
fisher.test(y, alternative = "greater")
dat <- matrix(c(0.53,0.35,0.12,140,100,50), 2)
chisq.test(dat)
chisq.test(dat, correct = FALSE)
dat <- matrix(c(53,35,12,140,100,50), 2)
chisq.test(dat)
chisq.test(dat, correct = FALSE)
45/200
(45/200)*100
(140/200)*100
z<-matrix(C(43,8,4, 45), nrow=2)
z
z<-matrix(C(43,8,4,45), nrow=2)
z<-matrix(c(43,8,4,45), nrow=2)
dat <- matrix(c(0.53,0.35,0.12,140,100,50), 2)
chisq.test(z, correct = FALSE)
package(swirl)
load.package(swirl)
library(swirl)
swirl()
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
tr(plants)
str(plants)
?sample()
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100, reaplace=TRUE)
sample(c(0,1),100, replace=TRUE)
sample(c(0,1),100, replace=TRUE, prob=c(0.3,0.7))
sample(c(0,1),100, replace=TRUE, prob=c(0.3,0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips<-sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips<-rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rbinom
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,lambda=10)
replicate(100,rpois(5,lambda=10))<-my_pois
replicate(100,rpois(5,lambda=10))->my_pois
my_pois<-replicate(100,rpois(5,lambda=10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colmeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())->t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")->t4
t4
clas(t4)
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plat(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col =1)
plot(cars,col =2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2
)
data(mtcars)
?boxpolot
?boxpolt
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
quit
library(devtools)
install_github("jennybc/gapminder")
library(devtools)
install_github("jennybc/gapminder")
install.packages(c("boot", "codetools", "foreign", "manipulate", "MASS", "Matrix", "mgcv", "nlme"))
library(devtools)
install_github("jennybc/gapminder")
install.package("devtools")
install.packages("devtools")
library(devtools)
install_github("jennybc/gapminder")
library(gapminder)
data(gapminder)
head(gapminder)
x<-subset(gapminder, gapminder$year ==1952)
mean(x$lifeExp <= 40)
mean(x$lifeExp <= 60) - mean(x$lifeExp <= 40)
prop = function(q) {
mean(x$lifeExp <= q)
}
prop(40)
qs = seq(from=min(x$lifeExp), to=max(x$lifeExp), length=20)
qs
props = sapply(qs, prop)
plot(qs, props)
props = sapply(qs, function(q) mean(x$lifeExp <= q))
plot(ecdf(x$lifeExp))
x<-subset(gapminder,gapminder$year==1952)
log10x<-log10(x$pop)
hist(log10x)
sd(log10x)
z<-(log10x-mean(log10x)/sd(log10x))
plot(z, qqnorm(log10x))
length(qqnorm(log10x))
log10x
tail(sort(z),1)
length(z)
tail(sort(z),142)
meanl<-mean(log10x)
meanl
sd(log10x)->sdl
z<-(log10x-meanl)/sdl
z
plot(z, qqnorm(log10x))
tail(sort(z),142)
F = function(q) pnorm(q, mean=meanl, sd=sdl)
F(6)
n = length(log10x)
F(7)*n -F(6)*n
head(pnorm(log10x, mean=meanl, sd=sdl))
mean(z)
sd(z)
qs = (1:n - 0.5)/n
qnorm(qs)
qs
sort (qs)
sort(qnorm(qs))
m<-matrix(0,0.5,1,0.5,0,0,11.,0,0,1,1, nroww=4)
m<-matrix(0,0.5,1,0.5,0,0,1,0.5,0,0,1,1, nroww=4)
m<-matrix(c(0,0.5,1,0.5,0,0,1,0.5,0,0,1,1), nroww=4)
m<-matrix(c(0,0.5,0.5,1,0.5,0,0,1,1,0,0,0,1,1), nroww=4)
m<-matrix(c(0,0.5,0.5,1,0.5,0,0,1,1,0,0,0,1,1), nrow=4)
m<-matrix(c(0,0.5,0.5,1,0,0,1,1,0,0,1,1), nrow=4)
m
eigen(m, symetric=FALSE)
eigen(m, symmetric=FALSE)
solve(m)
m<-matrix(c(0,0.5,0.5,0,0,1,0,0,1), nrow=3)
m
solve(m)
eigen(m, symmetric=FALSE)
solve(m)
a<-matrix(c(sec(1/3, lentgh.out=12)))
a<-matrix(c(seq(1/3, lentgh.out=12)))
a<-matrix(c(rep(1/3, times=12)))
a
a<-matrix(c(rep(1/3, times=12)), nrows=3)
a<-matrix(c(rep(1/3, times=12)), nrow=3)
a
m
a<-matrix(c(rep(1/3, times=9)), nrow=3).
a<-matrix(c(rep(1/3, times=9)), nrow=3)
a
m2<-m*0.7
a2<-a*0.3
m3<-m2+a2
m3
solve(m3)
eigen(m3)
eigen(m, symmetric=FALSE)
b<- matrix(c(rep(1/3,times=3)))
b
solve(m3, b)
b<- matrix(c(rep(1,times=3)))
solve(m3, b)
eigen(m3, b)
eigen(m3)
eigen(m3, b)
m<-matrix(c(0,0.5,0.5,0,0,1,1,0,0), nrow=3)
m2<-m*0.85
a2<-a*0.15
m3<-m2+a2
m3
x<-(2600/3911)
y<-(1140/3911)
z<-(171/3911)
0.85x = z + 0.15y
0.85*x = z + 0.15*y
0.85*x == z + 0.15*y
0.85*z == y + 0.575*x
x == 0.9*c + 0.05*b
x == 0.9*z + 0.05*y
0.95*z == 0.9*y + 0.475*x
m<-matrix(c(0,0.5,0.5,0,0,1,1,0,0), nrows=3)
m<-matrix(c(0,0.5,0.5,0,0,1,1,0,0), nrow=3)
m
r<-matrix(c(rep=1, times=3))
r
r<-matrix(c(rep(1, times=3))
)
r
r1<-m %*% r
r
r2<-m %*% r1
r3<-m %*% r2
r4<-m %*% r3
r5<-m %*% r4
r5
r4
for(i in 1:100){
x<-m %*% x
}
x<-r
for(i in 1:100){
x<-m %*% x
}
x
for(i in 1:10000){
x<-m %*% x
}
x
e<-2.718
e^(-0.003*40)->a
e^(-0.003*b)->b
e^(-0.003*35)->b
b-a
e^0.64
e^0.64+0.44
-2.44+0.64->x
e^x->y
y+1
y
x/(1+x)
-2.44+0.64->x
(e^x)/(1+(e^x))
-0.03->x
(e^x)/(1+(e^x))
-0.3->x
(e^x)/(1+(e^x))
-1.05->x
(e^x)/(1+(e^x))
x<-0.17+1.1
e<-2.714
(e^x)/(1+(e^x))
setwd("~/studie oud/EST IBW 2013-2014/MOOC/Datascience/datasciencecoursera/Cleaning/wk3")
source("extract_means.R")
install.packages(dplyr)
install.packages("dplyr")
install.packages("stringr")
install.packages("tidyr")
source("extract_means.R")
source("extract_means.R")
source("extract_means.R")
pracnames
step5
source("extract_means.R")
source("test.R")
source("test.R")
# Use tidyr to gather measurements into tidy data (1 line per observation)
ttidy <- skinny %>%
gather(sensor, Value, 3:68)
# Use dplyr to summarize by subject and activity
ttidy <- ttidy %>%
group_by(subject, activity)%>%
summarize(mean = mean(Value))
# Write out tidy data set to file
write.csv(ttidy, "tidy_data.csv", row.names = FALSE)
keepnames <- grepl("mean|std|Subject|Activity", colnames(df)) &
!grepl("meanFreq", colnames(df))
skinny <- df[, keepnames]
print("step 2 complete")
### Step 3
# Change Activities from numeric to names
# Load in activity names file and add appropriate column names prior to join
activity_names <- read.table("./data/UCI HAR Dataset/activity_labels.txt", stringsAsFactors = FALSE)
colnames(activity_names) <- c("Activity", "ActDesc")
# Join activity names with skinny by Activity in each data frame
skinny <- tbl_df(skinny)
skinny <- inner_join(skinny, activity_names)
# Reorder columns to move new activity names to first column
# and remove and rename Description as activity
skinny <- skinny[,c(69, 2:68)]
colnames(skinny)[1] <- "Activity"
print("step 3 complete")
### Step 4
# Rename variable names in skinny to make more sense and separate by "-"
pracnames <- names(skinny)
pracnames <- str_replace_all(pracnames, "Acc", "-acceleration-")
pracnames <- str_replace_all(pracnames, "Gyro", "-gyroscope-")
pracnames <- str_replace_all(pracnames, "Mag", "-magnitude")
pracnames <- str_replace_all(pracnames, "\\(\\)", "")
pracnames <- str_replace_all(pracnames, "^t", "time-")
pracnames <- str_replace_all(pracnames, "^f", "frequency-")
pracnames <- str_replace_all(pracnames, "tBody", "time-body-")
pracnames <- str_replace_all(pracnames, "BodyBody", "body")
pracnames <- str_replace_all(pracnames, "--", "-")
pracnames <- tolower(pracnames)
names(skinny) <- pracnames
print("step 4 complete")
### Step 5
# Use tidyr to gather measurements into tidy data (1 line per observation)
ttidy <- skinny %>% gather(sensor, Value, 3:68)
# Use dplyr to summarize by subject and activity
ttidy <- ttidy %>% group_by(Subject, activity)%>%
summarize(mean = mean(Value))
# Write out tidy data set to file
write.table(ttidy, "tidy_data.txt", row.name = FALSE)
keepnames <- grepl("mean|std|Subject|Activity", colnames(df)) &
!grepl("meanFreq", colnames(df))
skinny <- df[, keepnames]
print("step 2 complete")
### Step 3
# Change Activities from numeric to names
# Load in activity names file and add appropriate column names prior to join
activity_names <- read.table("./data/UCI HAR Dataset/activity_labels.txt", stringsAsFactors = FALSE)
colnames(activity_names) <- c("Activity", "ActDesc")
# Join activity names with skinny by Activity in each data frame
skinny <- tbl_df(skinny)
skinny <- inner_join(skinny, activity_names)
# Reorder columns to move new activity names to first column
# and remove and rename Description as activity
skinny <- skinny[,c(69, 2:68)]
colnames(skinny)[1] <- "Activity"
print("step 3 complete")
### Step 4
# Rename variable names in skinny to make more sense and separate by "-"
pracnames <- names(skinny)
pracnames <- str_replace_all(pracnames, "Acc", "-acceleration-")
pracnames <- str_replace_all(pracnames, "Gyro", "-gyroscope-")
pracnames <- str_replace_all(pracnames, "Mag", "-magnitude")
pracnames <- str_replace_all(pracnames, "\\(\\)", "")
pracnames <- str_replace_all(pracnames, "^t", "time-")
pracnames <- str_replace_all(pracnames, "^f", "frequency-")
pracnames <- str_replace_all(pracnames, "tBody", "time-body-")
pracnames <- str_replace_all(pracnames, "BodyBody", "body")
pracnames <- str_replace_all(pracnames, "--", "-")
pracnames <- tolower(pracnames)
names(skinny) <- pracnames
print("step 4 complete")
### Step 5
# Use tidyr to gather measurements into tidy data (1 line per observation)
ttidy <- skinny %>% gather(sensor, Value, 3:68)
# Use dplyr to summarize by subject and activity
ttidy <- ttidy %>% group_by(Subject, activity)%>%
summarize(mean = mean(Value))
# Write out tidy data set to file
write.table(ttidy, "tidy_data.txt", row.name = FALSE)
print("step 5 complete")
write.csv(ttidy, "tidy_data.csv", row.names = FALSE)
setwd("~/studie oud/EST IBW 2013-2014/MOOC/Datascience/datasciencecoursera/Cleaning/wk3/Project")
names(read.csv("tidy_data.csv"))
unique(names(ttdy$sensor))
unique(names(ttidy$sensor))
a<-names(ttidy$sensor))
a<-names(ttidy$sensor)
a
a<-unique(ttidy$sensor)
a
